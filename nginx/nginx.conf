# /========================================================================\
# |        HEIMDALL - INTELLIGENT SOLANA RPC GATEWAY - NGINX CONFIG        |
# |========================================================================|
# | This configuration creates a dynamic, multi-layered RPC gateway.       |
# | It routes requests based on client preferences (via HTTP headers),     |
# | offers automatic failover for a robust, free service, and includes     |
# | all major RPC providers with a free tier.                              |
# \========================================================================/

events {
    worker_connections 2048;
}

http {
    # This map translates the X-Pricing-Preference header from the SDK into the
    # correct upstream group to be used for the request.
    map $http_x_pricing_preference $rpc_pool {
        default "free_tier_syndica";
        "free"  "free_tier_syndica";
        "paid"  "paid_tier_primary"; # Placeholder for paid tier logic
    }

    # DNS resolver to resolve hostnames of external providers
    resolver 8.8.8.8 valid=300s;
    resolver_timeout 5s;

    #---------------------------------------
    # 1. UPSTREAM PROVIDER POOLS (HTTP/S)
    #---------------------------------------
    # These pools group RPC providers based on their service tier (free tier)

    # --- FREE TIER ---
    # 1. Syndica (100 RPS) - High burst capacity.
    upstream free_tier_syndica {
        server solana-mainnet.api.syndica.io:443;
    }
    # 2. Ankr (30 RPS) - Good volume and performance.
    upstream free_tier_ankr {
        server rpc.ankr.com:443;
    }
    # 3. Alchemy (25 RPS) - Very high monthly CU volume.
    upstream free_tier_alchemy {
        server solana-mainnet.g.alchemy.com:443;
    }
    # 4. Chainstack (25 RPS) - Simple request counting model.
    upstream free_tier_chainstack {
        # The host may vary, this is an example
        server solana-mainnet.core.chainstack.com:443;
    }
    # 5. QuickNode (15 RPS) - Solid and balanced. Requires a custom hostname.
    upstream free_tier_quicknode {
        server $quicknode_hostname:443;
    }
    # 6. Solana Foundation's public node.
    upstream public_fallback {
        server api.mainnet-beta.solana.com:443;
    }

    # --- REGIONAL POOLS (for low-latency routing) ---
    # Using Helius as an example. Requires custom hostnames
    upstream region_us {
        server $helius_hostname_us:443;
    }
    upstream region_eu {
        server $helius_hostname_eu:443;
    }
    upstream region_apac {
        server $helius_hostname_apac:443;
    }

    #-----------------------------------------------
    # 2. UPSTREAM PROVIDER POOLS (WEBSOCKETS/WSS)
    #-----------------------------------------------
    # WebSockets are stateful and need their own dedicated pools.

    upstream ws_free_syndica {
        server solana-mainnet.api.syndica.io:443;
    }
    upstream ws_free_alchemy {
        server solana-mainnet.g.alchemy.com:443;
    }
    upstream ws_free_quicknode {
        server $quicknode_hostname:443;
    }
    upstream ws_free_chainstack {
        server solana-mainnet.core.chainstack.com:443;
    }

    #---------------------------------------
    # 3. LOGGING AND SERVER CONFIGURATION
    #---------------------------------------
    log_format rpc_logs '$remote_addr - $time_local "$request" '
                        'status=$status upstream=$upstream_addr '
                        'latency=$upstream_response_time';

    access_log /var/log/nginx/access.log rpc_logs;
    error_log /var/log/nginx/error.log warn;

    server {
        listen 80;

        set $syndica_api_key "${SYNDICA_API_KEY}";
        set $alchemy_api_key "${ALCHEMY_API_KEY}";
        set $ankr_api_key "${ANKR_API_KEY}";
        set $chainstack_api_key "${CHAINSTACK_API_KEY}";
        set $quicknode_auth_token "${QUICKNODE_AUTH_TOKEN}";
        set $quicknode_hostname "${QUICKNODE_HOSTNAME}";
        set $helius_hostname_us "${HELIUS_HOSTNAME_US}";
        set $helius_hostname_eu "${HELIUS_HOSTNAME_EU}";
        set $helius_hostname_apac "${HELIUS_HOSTNAME_APAC}";

        #------------------------------------------
        # LOCATION: DYNAMIC RPC ROUTING (HTTP/S)
        #------------------------------------------
        location /rpc {
            proxy_pass https://free_tier_syndica/api-key/$syndica_api_key;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_intercept_errors on;
            error_page 502 503 504 = @failover_to_ankr;
        }

        #-------------------------------------------
        # LOCATION: REGIONAL RPC ROUTING (HTTP/S)
        #-------------------------------------------
        location /rpc-regional {
            # Default is US, but can be overridden by the header
            set $regional_upstream "region_us";
            if ($http_x_region_preference = "eu") {
                set $regional_upstream "region_eu";
            }
            if ($http_x_region_preference = "apac") {
                set $regional_upstream "region_apac";
            }

            # The API key/token for the regional provider (e.g., Helius) must be passed here
            set $regional_api_key "${HELIUS_API_KEY}"; # Example
            proxy_pass https://$regional_upstream/?api_key=$regional_api_key;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        #-------------------------------
        # LOCATION: WEBSOCKET ROUTING
        #-------------------------------
        location /rpc-ws {
            proxy_pass https://ws_free_syndica/api-key/$syndica_api_key/;
            proxy_next_upstream error timeout;
            error_page 502 503 504 = @failover_ws_alchemy;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400s;
        }
        
        #----------------------------------------
        # INTERNAL FAILOVER LOCATIONS (HTTP/S)
        #----------------------------------------
        location @failover_to_ankr {
            proxy_pass https://free_tier_ankr/solana/$ankr_api_key;
            proxy_next_upstream error timeout http_502 http_503 http_504;
            error_page 502 503 504 = @failover_to_alchemy;
        }
        location @failover_to_alchemy {
            proxy_pass https://free_tier_alchemy/v2/$alchemy_api_key;
            proxy_next_upstream error timeout http_502 http_503 http_504;
            error_page 502 503 504 = @failover_to_chainstack;
        }
        location @failover_to_chainstack {
            proxy_pass https://free_tier_chainstack/$chainstack_api_key;
            proxy_next_upstream error timeout http_502 http_503 http_504;
            error_page 502 503 504 = @failover_to_quicknode;
        }
        location @failover_to_quicknode {
            proxy_pass https://free_tier_quicknode/$quicknode_auth_token/;
            proxy_next_upstream error timeout http_502 http_503 http_504;
            error_page 502 503 504 = @fallback_public_rpc;
        }
        location @fallback_public_rpc {
            proxy_pass https://public_fallback;
        }

        #-------------------------------------
        # INTERNAL FAILOVER LOCATIONS (WSS)
        #-------------------------------------
        location @failover_ws_alchemy {
            proxy_pass https://ws_free_alchemy/v2/$alchemy_api_key;
            proxy_next_upstream error timeout;
            error_page 502 503 504 = @failover_ws_chainstack;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        location @failover_ws_chainstack {
            proxy_pass https://ws_free_chainstack/$chainstack_api_key;
            proxy_next_upstream error timeout;
            error_page 502 503 504 = @failover_ws_quicknode;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        location @failover_ws_quicknode {
            proxy_pass https://ws_free_quicknode/$quicknode_auth_token/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        #---------------------------
        # OTHER SERVICE LOCATIONS
        #---------------------------
        location /health {
            add_header Content-Type text/plain;
            return 200 'OK';
        }
    }
}